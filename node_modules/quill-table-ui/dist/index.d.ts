import * as Quill from 'quill';
interface Range {
    index: number;
    length: number;
}
declare enum QuillEvents {
    EDITOR_CHANGE = "editor-change",
    SCROLL_BEFORE_UPDATE = "scroll-before-update",
    SCROLL_BLOT_MOUNT = "scroll-blot-mount",
    SCROLL_BLOT_UNMOUNT = "scroll-blot-unmount",
    SCROLL_OPTIMIZE = "scroll-optimize",
    SCROLL_UPDATE = "scroll-update",
    SELECTION_CHANGE = "selection-change",
    TEXT_CHANGE = "text-change"
}
declare enum QuillSources {
    API = "api",
    SILENT = "silent",
    USER = "user"
}
export interface MenuItem {
    title: string;
    icon: string;
    handler: () => void;
}
export interface TableUIOptions {
    maxRowCount?: number;
}
export default class TableUI {
    TOGGLE_TEMPLATE: string;
    DEFAULTS: TableUIOptions;
    quill: Quill;
    options: any;
    toggle: HTMLElement;
    menu: HTMLElement;
    position: any;
    table: any;
    menuItems: MenuItem[];
    constructor(quill: Quill, options: any);
    editorChangeHandler: (type: QuillEvents, range: Range, oldRange: Range, source: QuillSources) => void;
    contextMenuHandler: (evt: MouseEvent) => boolean;
    toggleClickHandler: (e: any) => void;
    docClickHandler: () => () => void;
    isTable(range?: Range): boolean;
    getColCount(range?: Range): any;
    showMenu(): void;
    hideMenu(): void;
    createMenuItem(item: MenuItem): HTMLDivElement;
    detectButton(range: Range): void;
    showToggle(position: any): void;
    hideToggle(): void;
    toggleMenu(): void;
    destroy(): void;
}
export {};
